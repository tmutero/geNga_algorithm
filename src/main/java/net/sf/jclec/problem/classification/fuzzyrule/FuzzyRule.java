package net.sf.jclec.problem.classification.fuzzyrule;

import java.text.DecimalFormat;

import net.sf.jclec.exprtree.ExprTree;
import net.sf.jclec.problem.classification.base.Rule;
import net.sf.jclec.problem.classification.blocks.AttributeValue;
import net.sf.jclec.problem.classification.blocks.fuzzy.Maximum;
import net.sf.jclec.problem.classification.blocks.fuzzy.Minimum;
import net.sf.jclec.problem.util.dataset.instance.IInstance;
import net.sf.jclec.problem.util.dataset.metadata.IMetadata;

/**
 * Implementation of a classification fuzzy rule.<p/>
 * 
 * In fuzzy there is no crip classification yet a grade of certainty in which the rule covers an instance.
 * This is based on the certainty of the membership functions on the given instance.
 * Therefore, the classify() method returns a double value representing the degree in which the rule covers the instance.
 * 
 * 
 * 
 *  
 * 
 * 
 */

public class FuzzyRule extends Rule
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -8174242256644010121L;
	
	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	/////////////////////////////////////////////////////////////////
	
	private double certainty;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor.
	 */
	
	public FuzzyRule()
	{
		super();
	}
	
	/**
	 * Constructor
	 * 
	 * @param antecedent the antecedent of the rule
	 */
	
	public FuzzyRule(ExprTree antecedent)
	{
		super(antecedent);
	}
	
	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Gets the certainty of the rule
	 * 
	 * @return the certainty
	 */
	
	public double getCertainty() {
		return certainty;
	}

	/**
	 * Sets the certainty of the rule
	 * 
	 * @param certainty the certainty
	 */
	public void setCertainty(double certainty) {
		this.certainty = certainty;
	}
	
	/**
	 * Gets the coverage grade of the instance
	 * 
	 * @param instance the instance
	 * @return the grade of coverage
	 */
	
	@Override
	public double classify(IInstance instance)
	{
		return (Double) covers(instance);
	}
	
	/**
	 * Implementation of copy() method
	 */

	@Override
	public FuzzyRule copy()
	{
		FuzzyRule newRule = new FuzzyRule();
		
		newRule.setAntecedent(code.copy());
		newRule.setConsequent(consequent);
		if(fitness != null) newRule.setFitness(fitness);
		
		return newRule;
	}
	
	/**
     * Obtain the number of conditions of the rule
     * 
     * @return number of conditions
     */
	
	public int getConditions()
	{
		int count = 1;
		
		for(int j=0; j<code.size(); j++)
		{
			if(code.getBlock(j) instanceof Maximum ||
			   code.getBlock(j) instanceof Minimum  )
				count++;
		}
		
		return count;
	}
	
	/** 
	 *  Shows the complete rule antecedent and consequent
	 *  
	 *  @param metadata the metadata
	 *  @return the rule
	 */
	
	public String toString(IMetadata metadata)
	{
		StringBuffer sb = new StringBuffer("IF (");
		DecimalFormat df = new DecimalFormat("0.00");
		
		for (int j=0; j<code.size(); j++) 
		{
			if(code.getBlock(j) instanceof AttributeValue)
			{
				sb.append(metadata.getAttribute(Integer.parseInt(code.getBlock(j).toString())).getName() + " ");
				sb.append(code.getBlock(j+1).toString() + " ");
				j++;
			}
			else
			{
				sb.append(code.getBlock(j).toString() + " ");
			}
		}
		sb.append(") THEN ("+metadata.getAttribute(metadata.getClassIndex()).getName()+" = "+
				metadata.getAttribute(metadata.getClassIndex()).show(consequent)+") Certainty = " + df.format(certainty));
		return sb.toString();
	}
}