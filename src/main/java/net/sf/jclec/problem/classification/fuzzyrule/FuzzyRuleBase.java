package net.sf.jclec.problem.classification.fuzzyrule;

import java.util.ArrayList;
import java.util.List;

import net.sf.jclec.problem.classification.base.Rule;
import net.sf.jclec.problem.classification.base.RuleBase;
import net.sf.jclec.problem.util.dataset.IDataset;
import net.sf.jclec.problem.util.dataset.instance.IInstance;
import net.sf.jclec.problem.util.dataset.metadata.IMetadata;

/**
 * Implements a fuzzy rule-base for classification problems.<p/>
 * 
 * The rule-base implements a classifier which comprises a set of fuzzy classification rules.
 * 
 * Main methods:
 *    The classify() method classifies a particular instance or a complete dataset and returns the class predictions for the instances.
 *    Unlike crisp rules, the fuzzy rules covers the instances with a particular coverage grade.
 *    The higher the grade is the more confidence that the rule covers the instance.
 * 
 * 
 * 
 *  
 * 
 * 
 */

public class FuzzyRuleBase extends RuleBase
{	
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */

	private static final long serialVersionUID = 1L;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	/**
	 * Empty constructor
	 */
	
	public FuzzyRuleBase() {
		super();
	}

	/**
	 * Constructor
	 *
	 * @param defaultC the default class
	 */
	
	public FuzzyRuleBase(double defaultC) {
		super(defaultC);
	}
	
	/**
	 * Constructor
	 * 
	 * @param rules list of rules
	 * @param defaultC the default class
	 */
	
	public FuzzyRuleBase(List<Rule> rules, double defaultC) {
		super(rules,defaultC);
	}
	
	/////////////////////////////////////////////////////////////////
	// -------------------------- Implementing IClassifier interface
	/////////////////////////////////////////////////////////////////

	/**
	 * Return the estimated values by the classifier to the dataset
	 * 
	 * @param dataset the dataset
	 * @return array of coverage values
	 */
	public double[] classify(IDataset dataset) 
	{
		/** Get the dataset instances */
		ArrayList<IInstance> instances = dataset.getInstances();
		
        int numInstances = instances.size();
        int numRules = rules.size();
        double [] result = new double[numInstances];
        double [] coverage = new double[numInstances];
        
        /** For each instance **/
        for(int i=0; i < numInstances; i++)
        {
        	result[i] = getDefaultClass();
        	
        	/** Predict the class with the maximum coverage **/
        	for(int j = 0; j < numRules; j++)
        	{
				double cover = (Double) rules.get(j).covers(instances.get(i));
				
				if(cover > coverage[i])
				{
					coverage[i] = cover;
					result[i] = rules.get(j).getConsequent();
				}
			}
        }
        
    	return result;
	}

	/**
	 *  Return the estimated value to the instance
	 *  
	 *  @param instance the instance
	 *  @return the coverage value
	 */
	
	public double classify(IInstance instance) 
	{
		double coverage = 0.0;
		double result = getDefaultClass();
		int numRules = rules.size();
    	
    	for(int j=0; j<numRules; j++)
    	{
			double cover = (Double) rules.get(j).covers(instance);
			
			if(cover > coverage)
			{
				coverage = cover;
				result = rules.get(j).getConsequent();
			}
		}
		
		return result;
	}
	
	/**
	 * Implementation of copy() method
	 */
	
	@Override
	public FuzzyRuleBase copy()
	{
		ArrayList<Rule> newRules = new ArrayList<Rule>();
		
		for(Rule rule : rules)
			newRules.add(rule.copy());
		
		return new FuzzyRuleBase(newRules, defaultClass);
	}
	
	/** 
	 *  Shows the complete rule base
	 *  
	 *  @param metadata the metadata
	 *  @return the rule
	 */
	
	@Override
	public String toString(IMetadata metadata)
	{
		String result = new String();
		
		int numRules = rules.size();
		
		if(numRules > 0)
		{
			for (int i = 1; i <= numRules; i++)
			   result += " " + i + " Rule: " + rules.get(i-1).toString(metadata) + "\n";
		}
		
		return result;
	}
}